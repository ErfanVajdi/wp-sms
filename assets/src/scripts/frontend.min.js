/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/blocks.js":
/*!*****************************!*\
  !*** ./assets/js/blocks.js ***!
  \*****************************/
/***/ (() => {

eval("jQuery(document).ready(function () {\n  wpSmsSubscribeForm.init();\n  jQuery('.wpsms-sendSmsForm').each(function () {\n    wpSmsSendSmsBlockForm.init(this);\n  });\n});\nvar wpSmsSubscribeForm = {\n  init: function init() {\n    this.info = Array();\n    this.setFields();\n    this.setEventListener();\n  },\n  // Extract group_id from newsletter form\n  getGroupId: function getGroupId(element) {\n    var group_id = [];\n    var groupIdCheckboxes = element.find('input[name=\"group_id_checkbox\"]');\n    var groupIdSelect = element.find('select[name=\"group_id_select\"]');\n    for (var i = 0; i < groupIdCheckboxes.length; ++i) {\n      if (groupIdCheckboxes[i].checked) {\n        group_id.push(groupIdCheckboxes[i].value);\n      }\n    }\n    if (groupIdSelect && groupIdSelect.val()) {\n      group_id.push(groupIdSelect.val());\n    }\n    if (!group_id.length) {\n      return;\n    }\n    return group_id;\n  },\n  setFields: function setFields() {\n    this.wpSmsGdprCheckbox = jQuery('.js-wpSmsGdprConfirmation');\n    this.wpSmsEventType = jQuery(\".js-wpSmsSubscribeType\");\n    this.wpSmsSubmitTypeButton = jQuery('.js-wpSmsSubmitTypeButton');\n    this.mandatoryVerify = jQuery('.js-wpSmsMandatoryVerify').val();\n  },\n  sendSubscriptionForm: function sendSubscriptionForm(element) {\n    var $this = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    var submitButton = element.children().find('.js-wpSmsSubmitButton');\n    var messageContainer = element.children().find('.js-wpSmsSubscribeMessage');\n    var processingOverlay = element.children().find('.js-wpSmsSubscribeOverlay');\n    var firstStep = element.children().find('.js-wpSmsSubscribeStepOne');\n    var firstStepSubmitButton = element.children().find('.js-wpSmsSubmitButton');\n    var secondStep = element.children().find('.js-wpSmsSubscribeStepTwo');\n    var customFields = element.children().find('.js-wpSmsSubscriberCustomFields');\n    submitButton.prop('disabled', true);\n    messageContainer.hide();\n    processingOverlay.css('display', 'flex');\n    var requestBody = {\n      name: element.children().find(\".js-wpSmsSubscriberName input\").val(),\n      mobile: element.children().find(\".js-wpSmsSubscriberMobile input\").val(),\n      group_id: this.getGroupId(element),\n      type: element.children().find(\".js-wpSmsSubscribeType:checked\").val()\n    };\n    if (customFields.length) {\n      var fields = {};\n      customFields.each(function (index, item) {\n        var label = jQuery(item).data('field-name');\n        var value = jQuery(item).find('input').val();\n        fields[label] = value;\n      });\n      requestBody.custom_fields = fields;\n    }\n    element.ajaxStart(function () {\n      submitButton.attr('disabled', 'disabled');\n      submitButton.text(wpsms_ajax_object.loading_text);\n    });\n    element.ajaxComplete(function () {\n      submitButton.prop('disabled', true);\n      submitButton.text(wpsms_ajax_object.subscribe_text);\n    });\n    if (requestBody.type === 'subscribe') {\n      var endpointUrl = wpsms_ajax_object.newsletter_endpoint_url;\n    } else {\n      var endpointUrl = wpsms_ajax_object.newsletter_endpoint_url + '/unsubscribe';\n    }\n    var ajax = jQuery.ajax({\n      type: 'POST',\n      url: endpointUrl,\n      contentType: 'application/json',\n      data: JSON.stringify(requestBody)\n    });\n    ajax.fail(function (data) {\n      var response = JSON.parse(data.responseText);\n      var message = null;\n      submitButton.prop('disabled', false);\n      processingOverlay.css('display', 'none');\n      if (typeof response.error != \"undefined\" && response.error !== null) {\n        message = response.error.message;\n      } else if (response.data.status !== null) {\n        Object.keys(response.data.params).forEach(function (parameter) {\n          message = response.data.params[parameter];\n        });\n      } else {\n        message = wpsms_ajax_object.unknown_error;\n      }\n      messageContainer.fadeIn();\n      messageContainer.html('<span class=\"wpsms-subscribe__message wpsms-subscribe__message--error\">' + message + '</div>');\n    });\n    ajax.done(function (data) {\n      var message = data.message;\n      submitButton.prop('disabled', false);\n      processingOverlay.css('display', 'none');\n      messageContainer.fadeIn();\n      firstStep.hide();\n      messageContainer.html('<span class=\"wpsms-subscribe__message wpsms-subscribe__message--success\">' + message + '</div>');\n      if (requestBody.type === 'subscribe' && $this.mandatoryVerify === '1') {\n        firstStepSubmitButton.prop('disabled', true);\n        secondStep.show();\n      }\n    });\n    $this.info = requestBody;\n  },\n  sendActivationCode: function sendActivationCode(element) {\n    var $this = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    var activationButton = element.children().find('.js-wpSmsActivationButton');\n    var subscribeFormContainer = element.parents('.js-wpSmsSubscribeFormContainer');\n    var messageContainer = element.children().find('.js-wpSmsSubscribeMessage');\n    var processingOverlay = element.children().find('.js-wpSmsSubscribeOverlay');\n    var secondStep = element.children().find('.js-wpSmsSubscribeStepTwo');\n    activationButton.prop('disabled', true);\n    messageContainer.hide();\n    processingOverlay.css('display', 'flex');\n    $this.info.activation = element.children().find('.js-wpSmsActivationCode').val();\n    subscribeFormContainer.ajaxStart(function () {\n      activationButton.prop('disabled', true);\n      activationButton.text(wpsms_ajax_object.loading_text);\n    });\n    subscribeFormContainer.ajaxComplete(function () {\n      activationButton.prop('disabled', false);\n      activationButton.text(wpsms_ajax_object.activation_text);\n    });\n    var ajax = jQuery.ajax({\n      type: 'POST',\n      url: wpsms_ajax_object.newsletter_endpoint_url + '/verify',\n      contentType: 'application/json',\n      data: JSON.stringify($this.info)\n    });\n    ajax.fail(function (data) {\n      var response = JSON.parse(data.responseText);\n      var message = null;\n      activationButton.prop('disabled', false);\n      processingOverlay.css('display', 'none');\n      if (typeof response.error != \"undefined\" && response.error !== null) {\n        message = response.error.message;\n      } else {\n        message = wpsms_ajax_object.unknown_error;\n      }\n      messageContainer.fadeIn();\n      messageContainer.html('<span class=\"wpsms-subscribe__message wpsms-subscribe__message--error\">' + message + '</div>');\n    });\n    ajax.done(function (data) {\n      var message = data.message;\n      activationButton.prop('disabled', false);\n      processingOverlay.css('display', 'none');\n      messageContainer.fadeIn();\n      secondStep.hide();\n      messageContainer.html('<span class=\"wpsms-subscribe__message wpsms-subscribe__message--success\">' + message + '</div>');\n    });\n  },\n  setEventListener: function setEventListener() {\n    var $this = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\n    // GDPR Confirmation\n    // Enable and disable the form submit button by changing the status of GDPR checkbox\n    this.wpSmsGdprCheckbox.on('change', function () {\n      if (this.checked) {\n        jQuery(this).parents('.js-wpSmsSubscribeFormField').nextAll('.js-wpSmsSubmitButton').first().prop('disabled', false);\n      } else {\n        jQuery(this).parents('.js-wpSmsSubscribeFormField').nextAll('.js-wpSmsSubmitButton').first().prop('disabled', true);\n      }\n    });\n\n    // Subscribe or Unsubscribe\n    // Change the text of submit button based on the chosen event, Subscribe or Unsubscribe\n    this.wpSmsEventType.on('click', function () {\n      jQuery(this).parents('.js-wpSmsSubscribeFormField').nextAll('.js-wpSmsSubmitButton').first().text(jQuery(this).data('label'));\n    });\n\n    // Submitting The Form\n    this.wpSmsSubmitTypeButton.on('click', function (event) {\n      // avoid to execute the actual submit of the form\n      event.preventDefault();\n      if (jQuery(this).hasClass('js-wpSmsSubmitButton')) {\n        $this.sendSubscriptionForm(jQuery(this).parents('.js-wpSmsSubscribeForm'));\n      }\n      if (jQuery(this).hasClass('js-wpSmsActivationButton')) {\n        $this.sendActivationCode(jQuery(this).parents('.js-wpSmsSubscribeForm'));\n      }\n    });\n  }\n};\nvar wpSmsSendSmsBlockForm = {\n  // SB is abbreviation for SendSMS Block\n  init: function init(SBForm) {\n    SBForm = jQuery(SBForm);\n    this.setSendSmsBlockFields(SBForm);\n  },\n  setSendSmsBlockFields: function setSendSmsBlockFields(SBForm) {\n    SBSubscriberGroup = SBForm.find('input[name=subscriberGroup]');\n    SBSubmit = SBForm.find('input[type=submit]');\n    SBMessage = SBForm.find('textarea.wpsms-sendSmsForm__messageField');\n    SBReceiver = SBForm.find('input[name=receiver]');\n    SBPhoneNumber = SBForm.find('input.wpsms-sendSmsForm__receiverField');\n    SBMessageAlert = SBForm.find('p.wpsms-sendSmsForm__messageField__alert');\n    SBResult = SBForm.find('div.wpsms-sendSmsForm__resultMessage');\n    SBOverlay = SBForm.find('div.wpsms-sendSmsForm__overlay');\n    SBMaxCount = SBMessage.data('max');\n    var elements = {\n      SBSubscriberGroup: SBSubscriberGroup,\n      SBSubmit: SBSubmit,\n      SBMessage: SBMessage,\n      SBReceiver: SBReceiver,\n      SBPhoneNumber: SBPhoneNumber,\n      SBMessageAlert: SBMessageAlert,\n      SBResult: SBResult,\n      SBOverlay: SBOverlay,\n      SBMaxCount: SBMaxCount\n    };\n    this.setSendSmsBlockEventListeners(elements);\n  },\n  setSendSmsBlockEventListeners: function setSendSmsBlockEventListeners(elements) {\n    // Add event listener for send sms\n    jQuery(elements.SBSubmit).on('click', function (event) {\n      event.preventDefault();\n      var formData = new FormData();\n      formData.append('sender', wpsms_ajax_object.sender);\n      formData.append('recipients', elements.SBReceiver.val());\n      formData.append('message', elements.SBMessage.val());\n      formData.append('group_ids', elements.SBSubscriberGroup.val());\n      formData.append('numbers', elements.SBPhoneNumber.val());\n      formData.append('maxCount', elements.SBMaxCount);\n      jQuery.ajax({\n        url: wpsms_ajax_object.front_sms_endpoint_url,\n        method: 'POST',\n        contentType: false,\n        cache: false,\n        processData: false,\n        data: formData,\n        beforeSend: function beforeSend() {\n          jQuery(elements.SBResult).text('').fadeOut().removeClass('failed success');\n          jQuery(elements.SBOverlay).fadeIn();\n        },\n        success: function success(data, status, xhr) {\n          jQuery(elements.SBResult).text(data.data).fadeIn().addClass('success');\n          jQuery(elements.SBMessage).val('').trigger('input');\n          jQuery(elements.SBOverlay).fadeOut();\n        },\n        error: function error(data, status, xhr) {\n          jQuery(elements.SBResult).text(data.responseJSON.data.message).fadeIn().addClass('failed');\n          jQuery(elements.SBOverlay).fadeOut();\n        }\n      });\n    });\n\n    // Add event listener for max characters\n    jQuery(elements.SBMessage).on('input', function () {\n      var currentCharacterCount = jQuery(this).val().length;\n      var remainingCharacterCount = elements.SBMaxCount - currentCharacterCount;\n      if (currentCharacterCount >= elements.SBMaxCount - 8) {\n        jQuery(elements.SBMessageAlert).fadeIn();\n        jQuery(elements.SBMessageAlert).find('span').text(remainingCharacterCount);\n      } else {\n        jQuery(elements.SBMessageAlert).fadeOut();\n      }\n    });\n  }\n};\n\n//# sourceURL=webpack://wp-sms/./assets/js/blocks.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/js/blocks.js"]();
/******/ 	
/******/ })()
;